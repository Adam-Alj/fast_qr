//! Wrappers to create QRCode
//!
//! # Example stdout
//! ```rust
//! use fast_qr::{ECL, Version, QRBuilder};
//!
//! let qrcode = QRBuilder::new("https://example.com/".into())
//!     .ecl(ECL::H)
//!     .version(Version::V03)
//!     .build();
//! // It is preferable to check qrcode result before
//! qrcode.unwrap().print();
//! ```
//!
//! ```text
//! ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
//! █ ▄▄▄▄▄ █  ▀██ █ ██ ▀▄█ ▄▄▄▄▄ █
//! █ █   █ █▄▀▄▀▄█ ▄█▀█ ▄█ █   █ █
//! █ █▄▄▄█ █▀▀▀▀ ▄▄ ▄█ ▄▄█ █▄▄▄█ █
//! █▄▄▄▄▄▄▄█ ▀▄▀ ▀ ▀▄█▄█▄█▄▄▄▄▄▄▄█
//! ███▄▄▄▀▄▀ ▀▀▀▀█▀█ █▄▄▄   ▀▀ ▄ █
//! █ █ ▄▀ ▄▀  ▄  ▄ ▄ ▀ █▄   █▀█▀██
//! ██ ▀▄▀ ▄▄ █▄█▀▄▀█▀██▀  ▀▄▀▀▄  █
//! █ ▄▀ ▀▄▄█  ▄█ ██▄▄▀ █ █▄▄▀▀█▀██
//! █▀▄ ▀ ▄▄█▀▄ █ ▀█  ███▀ ▀▀▀ ▄ ▀█
//! █ █▀▄▄▀▄▀█ ▀ ▀▄█   █ ▀█ ▄▀▄█▀██
//! █▄█▄▄█▄▄█ █▄▄ ▄ ▄ ▀ ▄ ▄▄▄ ▀▄█▀█
//! █ ▄▄▄▄▄ ██▀ ▀  ▄ ▀▄   █▄█ ▀████
//! █ █   █ █  █▀ ▀▀█▄▄ ▀  ▄ ▄  █▄█
//! █ █▄▄▄█ █▄ ▄█▄█ ▀  ▄▄▄▄ ▄ ▀▄ ██
//! █▄▄▄▄▄▄▄███▄▄▄▄▄▄██▄███▄█▄█▄███
//! ```
//!
//! # Example SVG
//! ```rust
//! use fast_qr::{ECL, Version, QRBuilder};
//! use fast_qr::convert::svg::{SvgBuilder, Shape};
//!
//! let qrcode = QRBuilder::new("https://example.com/".into())
//!     .ecl(ECL::H)
//!     .version(Version::V03)
//!     .build();
//!
//! let _ = SvgBuilder::default()
//!     .shape(Shape::RoundedSquare)
//!     .to_file(&qrcode.unwrap(), "out.svg");
//! ```
//! <svg viewBox="0 0 37 37" xmlns="http://www.w3.org/2000/svg" style="max-width:360px;">
//!   <rect width="37px" height="37px" fill="#ffffff"/>
//!   <path d="M4.2,4.2 4.8,4.2 4.8,4.8 4.2,4.8zM5.2,4.2 5.8,4.2 5.8,4.8 5.2,4.8zM6.2,4.2 6.8,4.2 6.8,4.8 6.2,4.8zM7.2,4.2 7.8,4.2 7.8,4.8 7.2,4.8zM8.2,4.2 8.8,4.2 8.8,4.8 8.2,4.8zM9.2,4.2 9.8,4.2 9.8,4.8 9.2,4.8zM10.2,4.2 10.8,4.2 10.8,4.8 10.2,4.8zM12.2,4.2 12.8,4.2 12.8,4.8 12.2,4.8zM13.2,4.2 13.8,4.2 13.8,4.8 13.2,4.8zM17.2,4.2 17.8,4.2 17.8,4.8 17.2,4.8zM19.2,4.2 19.8,4.2 19.8,4.8 19.2,4.8zM22.2,4.2 22.8,4.2 22.8,4.8 22.2,4.8zM24.2,4.2 24.8,4.2 24.8,4.8 24.2,4.8zM26.2,4.2 26.8,4.2 26.8,4.8 26.2,4.8zM27.2,4.2 27.8,4.2 27.8,4.8 27.2,4.8zM28.2,4.2 28.8,4.2 28.8,4.8 28.2,4.8zM29.2,4.2 29.8,4.2 29.8,4.8 29.2,4.8zM30.2,4.2 30.8,4.2 30.8,4.8 30.2,4.8zM31.2,4.2 31.8,4.2 31.8,4.8 31.2,4.8zM32.2,4.2 32.8,4.2 32.8,4.8 32.2,4.8zM4.2,5.2 4.8,5.2 4.8,5.8 4.2,5.8zM10.2,5.2 10.8,5.2 10.8,5.8 10.2,5.8zM12.2,5.2 12.8,5.2 12.8,5.8 12.2,5.8zM13.2,5.2 13.8,5.2 13.8,5.8 13.2,5.8zM14.2,5.2 14.8,5.2 14.8,5.8 14.2,5.8zM17.2,5.2 17.8,5.2 17.8,5.8 17.2,5.8zM19.2,5.2 19.8,5.2 19.8,5.8 19.2,5.8zM22.2,5.2 22.8,5.2 22.8,5.8 22.2,5.8zM23.2,5.2 23.8,5.2 23.8,5.8 23.2,5.8zM26.2,5.2 26.8,5.2 26.8,5.8 26.2,5.8zM32.2,5.2 32.8,5.2 32.8,5.8 32.2,5.8zM4.2,6.2 4.8,6.2 4.8,6.8 4.2,6.8zM6.2,6.2 6.8,6.2 6.8,6.8 6.2,6.8zM7.2,6.2 7.8,6.2 7.8,6.8 7.2,6.8zM8.2,6.2 8.8,6.2 8.8,6.8 8.2,6.8zM10.2,6.2 10.8,6.2 10.8,6.8 10.2,6.8zM12.2,6.2 12.8,6.2 12.8,6.8 12.2,6.8zM14.2,6.2 14.8,6.2 14.8,6.8 14.2,6.8zM16.2,6.2 16.8,6.2 16.8,6.8 16.2,6.8zM18.2,6.2 18.8,6.2 18.8,6.8 18.2,6.8zM19.2,6.2 19.8,6.2 19.8,6.8 19.2,6.8zM23.2,6.2 23.8,6.2 23.8,6.8 23.2,6.8zM24.2,6.2 24.8,6.2 24.8,6.8 24.2,6.8zM26.2,6.2 26.8,6.2 26.8,6.8 26.2,6.8zM28.2,6.2 28.8,6.2 28.8,6.8 28.2,6.8zM29.2,6.2 29.8,6.2 29.8,6.8 29.2,6.8zM30.2,6.2 30.8,6.2 30.8,6.8 30.2,6.8zM32.2,6.2 32.8,6.2 32.8,6.8 32.2,6.8zM4.2,7.2 4.8,7.2 4.8,7.8 4.2,7.8zM6.2,7.2 6.8,7.2 6.8,7.8 6.2,7.8zM7.2,7.2 7.8,7.2 7.8,7.8 7.2,7.8zM8.2,7.2 8.8,7.2 8.8,7.8 8.2,7.8zM10.2,7.2 10.8,7.2 10.8,7.8 10.2,7.8zM13.2,7.2 13.8,7.2 13.8,7.8 13.2,7.8zM15.2,7.2 15.8,7.2 15.8,7.8 15.2,7.8zM18.2,7.2 18.8,7.2 18.8,7.8 18.2,7.8zM21.2,7.2 21.8,7.2 21.8,7.8 21.2,7.8zM23.2,7.2 23.8,7.2 23.8,7.8 23.2,7.8zM26.2,7.2 26.8,7.2 26.8,7.8 26.2,7.8zM28.2,7.2 28.8,7.2 28.8,7.8 28.2,7.8zM29.2,7.2 29.8,7.2 29.8,7.8 29.2,7.8zM30.2,7.2 30.8,7.2 30.8,7.8 30.2,7.8zM32.2,7.2 32.8,7.2 32.8,7.8 32.2,7.8zM4.2,8.2 4.8,8.2 4.8,8.8 4.2,8.8zM6.2,8.2 6.8,8.2 6.8,8.8 6.2,8.8zM7.2,8.2 7.8,8.2 7.8,8.8 7.2,8.8zM8.2,8.2 8.8,8.2 8.8,8.8 8.2,8.8zM10.2,8.2 10.8,8.2 10.8,8.8 10.2,8.8zM16.2,8.2 16.8,8.2 16.8,8.8 16.2,8.8zM17.2,8.2 17.8,8.2 17.8,8.8 17.2,8.8zM18.2,8.2 18.8,8.2 18.8,8.8 18.2,8.8zM19.2,8.2 19.8,8.2 19.8,8.8 19.2,8.8zM20.2,8.2 20.8,8.2 20.8,8.8 20.2,8.8zM22.2,8.2 22.8,8.2 22.8,8.8 22.2,8.8zM23.2,8.2 23.8,8.2 23.8,8.8 23.2,8.8zM24.2,8.2 24.8,8.2 24.8,8.8 24.2,8.8zM26.2,8.2 26.8,8.2 26.8,8.8 26.2,8.8zM28.2,8.2 28.8,8.2 28.8,8.8 28.2,8.8zM29.2,8.2 29.8,8.2 29.8,8.8 29.2,8.8zM30.2,8.2 30.8,8.2 30.8,8.8 30.2,8.8zM32.2,8.2 32.8,8.2 32.8,8.8 32.2,8.8zM4.2,9.2 4.8,9.2 4.8,9.8 4.2,9.8zM10.2,9.2 10.8,9.2 10.8,9.8 10.2,9.8zM12.2,9.2 12.8,9.2 12.8,9.8 12.2,9.8zM13.2,9.2 13.8,9.2 13.8,9.8 13.2,9.8zM14.2,9.2 14.8,9.2 14.8,9.8 14.2,9.8zM15.2,9.2 15.8,9.2 15.8,9.8 15.2,9.8zM16.2,9.2 16.8,9.2 16.8,9.8 16.2,9.8zM19.2,9.2 19.8,9.2 19.8,9.8 19.2,9.8zM22.2,9.2 22.8,9.2 22.8,9.8 22.2,9.8zM26.2,9.2 26.8,9.2 26.8,9.8 26.2,9.8zM32.2,9.2 32.8,9.2 32.8,9.8 32.2,9.8zM4.2,10.2 4.8,10.2 4.8,10.8 4.2,10.8zM5.2,10.2 5.8,10.2 5.8,10.8 5.2,10.8zM6.2,10.2 6.8,10.2 6.8,10.8 6.2,10.8zM7.2,10.2 7.8,10.2 7.8,10.8 7.2,10.8zM8.2,10.2 8.8,10.2 8.8,10.8 8.2,10.8zM9.2,10.2 9.8,10.2 9.8,10.8 9.2,10.8zM10.2,10.2 10.8,10.2 10.8,10.8 10.2,10.8zM12.2,10.2 12.8,10.2 12.8,10.8 12.2,10.8zM14.2,10.2 14.8,10.2 14.8,10.8 14.2,10.8zM16.2,10.2 16.8,10.2 16.8,10.8 16.2,10.8zM18.2,10.2 18.8,10.2 18.8,10.8 18.2,10.8zM20.2,10.2 20.8,10.2 20.8,10.8 20.2,10.8zM22.2,10.2 22.8,10.2 22.8,10.8 22.2,10.8zM24.2,10.2 24.8,10.2 24.8,10.8 24.2,10.8zM26.2,10.2 26.8,10.2 26.8,10.8 26.2,10.8zM27.2,10.2 27.8,10.2 27.8,10.8 27.2,10.8zM28.2,10.2 28.8,10.2 28.8,10.8 28.2,10.8zM29.2,10.2 29.8,10.2 29.8,10.8 29.2,10.8zM30.2,10.2 30.8,10.2 30.8,10.8 30.2,10.8zM31.2,10.2 31.8,10.2 31.8,10.8 31.2,10.8zM32.2,10.2 32.8,10.2 32.8,10.8 32.2,10.8zM12.2,11.2 12.8,11.2 12.8,11.8 12.2,11.8zM13.2,11.2 13.8,11.2 13.8,11.8 13.2,11.8zM15.2,11.2 15.8,11.2 15.8,11.8 15.2,11.8zM16.2,11.2 16.8,11.2 16.8,11.8 16.2,11.8zM17.2,11.2 17.8,11.2 17.8,11.8 17.2,11.8zM18.2,11.2 18.8,11.2 18.8,11.8 18.2,11.8zM19.2,11.2 19.8,11.2 19.8,11.8 19.2,11.8zM6.2,12.2 6.8,12.2 6.8,12.8 6.2,12.8zM7.2,12.2 7.8,12.2 7.8,12.8 7.2,12.8zM8.2,12.2 8.8,12.2 8.8,12.8 8.2,12.8zM10.2,12.2 10.8,12.2 10.8,12.8 10.2,12.8zM12.2,12.2 12.8,12.2 12.8,12.8 12.2,12.8zM20.2,12.2 20.8,12.2 20.8,12.8 20.2,12.8zM22.2,12.2 22.8,12.2 22.8,12.8 22.2,12.8zM23.2,12.2 23.8,12.2 23.8,12.8 23.2,12.8zM24.2,12.2 24.8,12.2 24.8,12.8 24.2,12.8zM25.2,12.2 25.8,12.2 25.8,12.8 25.2,12.8zM26.2,12.2 26.8,12.2 26.8,12.8 26.2,12.8zM27.2,12.2 27.8,12.2 27.8,12.8 27.2,12.8zM30.2,12.2 30.8,12.2 30.8,12.8 30.2,12.8zM31.2,12.2 31.8,12.2 31.8,12.8 31.2,12.8zM32.2,12.2 32.8,12.2 32.8,12.8 32.2,12.8zM9.2,13.2 9.8,13.2 9.8,13.8 9.2,13.8zM11.2,13.2 11.8,13.2 11.8,13.8 11.2,13.8zM12.2,13.2 12.8,13.2 12.8,13.8 12.2,13.8zM13.2,13.2 13.8,13.2 13.8,13.8 13.2,13.8zM14.2,13.2 14.8,13.2 14.8,13.8 14.2,13.8zM15.2,13.2 15.8,13.2 15.8,13.8 15.2,13.8zM16.2,13.2 16.8,13.2 16.8,13.8 16.2,13.8zM18.2,13.2 18.8,13.2 18.8,13.8 18.2,13.8zM20.2,13.2 20.8,13.2 20.8,13.8 20.2,13.8zM25.2,13.2 25.8,13.2 25.8,13.8 25.2,13.8zM26.2,13.2 26.8,13.2 26.8,13.8 26.2,13.8zM27.2,13.2 27.8,13.2 27.8,13.8 27.2,13.8zM28.2,13.2 28.8,13.2 28.8,13.8 28.2,13.8zM29.2,13.2 29.8,13.2 29.8,13.8 29.2,13.8zM30.2,13.2 30.8,13.2 30.8,13.8 30.2,13.8zM32.2,13.2 32.8,13.2 32.8,13.8 32.2,13.8zM4.2,14.2 4.8,14.2 4.8,14.8 4.2,14.8zM6.2,14.2 6.8,14.2 6.8,14.8 6.2,14.8zM7.2,14.2 7.8,14.2 7.8,14.8 7.2,14.8zM9.2,14.2 9.8,14.2 9.8,14.8 9.2,14.8zM10.2,14.2 10.8,14.2 10.8,14.8 10.2,14.8zM12.2,14.2 12.8,14.2 12.8,14.8 12.2,14.8zM13.2,14.2 13.8,14.2 13.8,14.8 13.2,14.8zM14.2,14.2 14.8,14.2 14.8,14.8 14.2,14.8zM15.2,14.2 15.8,14.2 15.8,14.8 15.2,14.8zM16.2,14.2 16.8,14.2 16.8,14.8 16.2,14.8zM17.2,14.2 17.8,14.2 17.8,14.8 17.2,14.8zM18.2,14.2 18.8,14.2 18.8,14.8 18.2,14.8zM19.2,14.2 19.8,14.2 19.8,14.8 19.2,14.8zM20.2,14.2 20.8,14.2 20.8,14.8 20.2,14.8zM22.2,14.2 22.8,14.2 22.8,14.8 22.2,14.8zM24.2,14.2 24.8,14.2 24.8,14.8 24.2,14.8zM25.2,14.2 25.8,14.2 25.8,14.8 25.2,14.8zM26.2,14.2 26.8,14.2 26.8,14.8 26.2,14.8zM27.2,14.2 27.8,14.2 27.8,14.8 27.2,14.8zM4.2,15.2 4.8,15.2 4.8,15.8 4.2,15.8zM6.2,15.2 6.8,15.2 6.8,15.8 6.2,15.8zM8.2,15.2 8.8,15.2 8.8,15.8 8.2,15.8zM9.2,15.2 9.8,15.2 9.8,15.8 9.2,15.8zM11.2,15.2 11.8,15.2 11.8,15.8 11.2,15.8zM12.2,15.2 12.8,15.2 12.8,15.8 12.2,15.8zM13.2,15.2 13.8,15.2 13.8,15.8 13.2,15.8zM15.2,15.2 15.8,15.2 15.8,15.8 15.2,15.8zM16.2,15.2 16.8,15.2 16.8,15.8 16.2,15.8zM18.2,15.2 18.8,15.2 18.8,15.8 18.2,15.8zM20.2,15.2 20.8,15.2 20.8,15.8 20.2,15.8zM21.2,15.2 21.8,15.2 21.8,15.8 21.2,15.8zM22.2,15.2 22.8,15.2 22.8,15.8 22.2,15.8zM25.2,15.2 25.8,15.2 25.8,15.8 25.2,15.8zM26.2,15.2 26.8,15.2 26.8,15.8 26.2,15.8zM27.2,15.2 27.8,15.2 27.8,15.8 27.2,15.8zM29.2,15.2 29.8,15.2 29.8,15.8 29.2,15.8zM31.2,15.2 31.8,15.2 31.8,15.8 31.2,15.8zM5.2,16.2 5.8,16.2 5.8,16.8 5.2,16.8zM7.2,16.2 7.8,16.2 7.8,16.8 7.2,16.8zM9.2,16.2 9.8,16.2 9.8,16.8 9.2,16.8zM10.2,16.2 10.8,16.2 10.8,16.8 10.2,16.8zM11.2,16.2 11.8,16.2 11.8,16.8 11.2,16.8zM12.2,16.2 12.8,16.2 12.8,16.8 12.2,16.8zM14.2,16.2 14.8,16.2 14.8,16.8 14.2,16.8zM17.2,16.2 17.8,16.2 17.8,16.8 17.2,16.8zM24.2,16.2 24.8,16.2 24.8,16.8 24.2,16.8zM25.2,16.2 25.8,16.2 25.8,16.8 25.2,16.8zM27.2,16.2 27.8,16.2 27.8,16.8 27.2,16.8zM30.2,16.2 30.8,16.2 30.8,16.8 30.2,16.8zM31.2,16.2 31.8,16.2 31.8,16.8 31.2,16.8zM32.2,16.2 32.8,16.2 32.8,16.8 32.2,16.8zM5.2,17.2 5.8,17.2 5.8,17.8 5.2,17.8zM6.2,17.2 6.8,17.2 6.8,17.8 6.2,17.8zM8.2,17.2 8.8,17.2 8.8,17.8 8.2,17.8zM9.2,17.2 9.8,17.2 9.8,17.8 9.2,17.8zM12.2,17.2 12.8,17.2 12.8,17.8 12.2,17.8zM16.2,17.2 16.8,17.2 16.8,17.8 16.2,17.8zM18.2,17.2 18.8,17.2 18.8,17.8 18.2,17.8zM20.2,17.2 20.8,17.2 20.8,17.8 20.2,17.8zM23.2,17.2 23.8,17.2 23.8,17.8 23.2,17.8zM24.2,17.2 24.8,17.2 24.8,17.8 24.2,17.8zM25.2,17.2 25.8,17.2 25.8,17.8 25.2,17.8zM26.2,17.2 26.8,17.2 26.8,17.8 26.2,17.8zM28.2,17.2 28.8,17.2 28.8,17.8 28.2,17.8zM29.2,17.2 29.8,17.2 29.8,17.8 29.2,17.8zM31.2,17.2 31.8,17.2 31.8,17.8 31.2,17.8zM32.2,17.2 32.8,17.2 32.8,17.8 32.2,17.8zM4.2,18.2 4.8,18.2 4.8,18.8 4.2,18.8zM5.2,18.2 5.8,18.2 5.8,18.8 5.2,18.8zM7.2,18.2 7.8,18.2 7.8,18.8 7.2,18.8zM9.2,18.2 9.8,18.2 9.8,18.8 9.2,18.8zM10.2,18.2 10.8,18.2 10.8,18.8 10.2,18.8zM12.2,18.2 12.8,18.2 12.8,18.8 12.2,18.8zM13.2,18.2 13.8,18.2 13.8,18.8 13.2,18.8zM14.2,18.2 14.8,18.2 14.8,18.8 14.2,18.8zM16.2,18.2 16.8,18.2 16.8,18.8 16.2,18.8zM19.2,18.2 19.8,18.2 19.8,18.8 19.2,18.8zM20.2,18.2 20.8,18.2 20.8,18.8 20.2,18.8zM22.2,18.2 22.8,18.2 22.8,18.8 22.2,18.8zM24.2,18.2 24.8,18.2 24.8,18.8 24.2,18.8zM26.2,18.2 26.8,18.2 26.8,18.8 26.2,18.8zM27.2,18.2 27.8,18.2 27.8,18.8 27.2,18.8zM4.2,19.2 4.8,19.2 4.8,19.8 4.2,19.8zM6.2,19.2 6.8,19.2 6.8,19.8 6.2,19.8zM7.2,19.2 7.8,19.2 7.8,19.8 7.2,19.8zM8.2,19.2 8.8,19.2 8.8,19.8 8.2,19.8zM12.2,19.2 12.8,19.2 12.8,19.8 12.2,19.8zM13.2,19.2 13.8,19.2 13.8,19.8 13.2,19.8zM16.2,19.2 16.8,19.2 16.8,19.8 16.2,19.8zM21.2,19.2 21.8,19.2 21.8,19.8 21.2,19.8zM22.2,19.2 22.8,19.2 22.8,19.8 22.2,19.8zM24.2,19.2 24.8,19.2 24.8,19.8 24.2,19.8zM28.2,19.2 28.8,19.2 28.8,19.8 28.2,19.8zM29.2,19.2 29.8,19.2 29.8,19.8 29.2,19.8zM31.2,19.2 31.8,19.2 31.8,19.8 31.2,19.8zM5.2,20.2 5.8,20.2 5.8,20.8 5.2,20.8zM6.2,20.2 6.8,20.2 6.8,20.8 6.2,20.8zM8.2,20.2 8.8,20.2 8.8,20.8 8.2,20.8zM9.2,20.2 9.8,20.2 9.8,20.8 9.2,20.8zM10.2,20.2 10.8,20.2 10.8,20.8 10.2,20.8zM13.2,20.2 13.8,20.2 13.8,20.8 13.2,20.8zM14.2,20.2 14.8,20.2 14.8,20.8 14.2,20.8zM16.2,20.2 16.8,20.2 16.8,20.8 16.2,20.8zM19.2,20.2 19.8,20.2 19.8,20.8 19.2,20.8zM20.2,20.2 20.8,20.2 20.8,20.8 20.2,20.8zM25.2,20.2 25.8,20.2 25.8,20.8 25.2,20.8zM29.2,20.2 29.8,20.2 29.8,20.8 29.2,20.8zM30.2,20.2 30.8,20.2 30.8,20.8 30.2,20.8zM31.2,20.2 31.8,20.2 31.8,20.8 31.2,20.8zM4.2,21.2 4.8,21.2 4.8,21.8 4.2,21.8zM6.2,21.2 6.8,21.2 6.8,21.8 6.2,21.8zM7.2,21.2 7.8,21.2 7.8,21.8 7.2,21.8zM8.2,21.2 8.8,21.2 8.8,21.8 8.2,21.8zM12.2,21.2 12.8,21.2 12.8,21.8 12.2,21.8zM14.2,21.2 14.8,21.2 14.8,21.8 14.2,21.8zM16.2,21.2 16.8,21.2 16.8,21.8 16.2,21.8zM17.2,21.2 17.8,21.2 17.8,21.8 17.2,21.8zM19.2,21.2 19.8,21.2 19.8,21.8 19.2,21.8zM20.2,21.2 20.8,21.2 20.8,21.8 20.2,21.8zM24.2,21.2 24.8,21.2 24.8,21.8 24.2,21.8zM25.2,21.2 25.8,21.2 25.8,21.8 25.2,21.8zM26.2,21.2 26.8,21.2 26.8,21.8 26.2,21.8zM27.2,21.2 27.8,21.2 27.8,21.8 27.2,21.8zM28.2,21.2 28.8,21.2 28.8,21.8 28.2,21.8zM29.2,21.2 29.8,21.2 29.8,21.8 29.2,21.8zM31.2,21.2 31.8,21.2 31.8,21.8 31.2,21.8zM32.2,21.2 32.8,21.2 32.8,21.8 32.2,21.8zM4.2,22.2 4.8,22.2 4.8,22.8 4.2,22.8zM7.2,22.2 7.8,22.2 7.8,22.8 7.2,22.8zM8.2,22.2 8.8,22.2 8.8,22.8 8.2,22.8zM10.2,22.2 10.8,22.2 10.8,22.8 10.2,22.8zM13.2,22.2 13.8,22.2 13.8,22.8 13.2,22.8zM15.2,22.2 15.8,22.2 15.8,22.8 15.2,22.8zM17.2,22.2 17.8,22.2 17.8,22.8 17.2,22.8zM19.2,22.2 19.8,22.2 19.8,22.8 19.2,22.8zM20.2,22.2 20.8,22.2 20.8,22.8 20.2,22.8zM21.2,22.2 21.8,22.2 21.8,22.8 21.2,22.8zM23.2,22.2 23.8,22.2 23.8,22.8 23.2,22.8zM26.2,22.2 26.8,22.2 26.8,22.8 26.2,22.8zM27.2,22.2 27.8,22.2 27.8,22.8 27.2,22.8zM29.2,22.2 29.8,22.2 29.8,22.8 29.2,22.8zM4.2,23.2 4.8,23.2 4.8,23.8 4.2,23.8zM6.2,23.2 6.8,23.2 6.8,23.8 6.2,23.8zM9.2,23.2 9.8,23.2 9.8,23.8 9.2,23.8zM11.2,23.2 11.8,23.2 11.8,23.8 11.2,23.8zM13.2,23.2 13.8,23.2 13.8,23.8 13.2,23.8zM14.2,23.2 14.8,23.2 14.8,23.8 14.2,23.8zM15.2,23.2 15.8,23.2 15.8,23.8 15.2,23.8zM16.2,23.2 16.8,23.2 16.8,23.8 16.2,23.8zM19.2,23.2 19.8,23.2 19.8,23.8 19.2,23.8zM20.2,23.2 20.8,23.2 20.8,23.8 20.2,23.8zM21.2,23.2 21.8,23.2 21.8,23.8 21.2,23.8zM23.2,23.2 23.8,23.2 23.8,23.8 23.2,23.8zM24.2,23.2 24.8,23.2 24.8,23.8 24.2,23.8zM26.2,23.2 26.8,23.2 26.8,23.8 26.2,23.8zM28.2,23.2 28.8,23.2 28.8,23.8 28.2,23.8zM31.2,23.2 31.8,23.2 31.8,23.8 31.2,23.8zM4.2,24.2 4.8,24.2 4.8,24.8 4.2,24.8zM6.2,24.2 6.8,24.2 6.8,24.8 6.2,24.8zM7.2,24.2 7.8,24.2 7.8,24.8 7.2,24.8zM9.2,24.2 9.8,24.2 9.8,24.8 9.2,24.8zM10.2,24.2 10.8,24.2 10.8,24.8 10.2,24.8zM12.2,24.2 12.8,24.2 12.8,24.8 12.2,24.8zM14.2,24.2 14.8,24.2 14.8,24.8 14.2,24.8zM15.2,24.2 15.8,24.2 15.8,24.8 15.2,24.8zM16.2,24.2 16.8,24.2 16.8,24.8 16.2,24.8zM17.2,24.2 17.8,24.2 17.8,24.8 17.2,24.8zM18.2,24.2 18.8,24.2 18.8,24.8 18.2,24.8zM19.2,24.2 19.8,24.2 19.8,24.8 19.2,24.8zM20.2,24.2 20.8,24.2 20.8,24.8 20.2,24.8zM22.2,24.2 22.8,24.2 22.8,24.8 22.2,24.8zM23.2,24.2 23.8,24.2 23.8,24.8 23.2,24.8zM24.2,24.2 24.8,24.2 24.8,24.8 24.2,24.8zM25.2,24.2 25.8,24.2 25.8,24.8 25.2,24.8zM26.2,24.2 26.8,24.2 26.8,24.8 26.2,24.8zM27.2,24.2 27.8,24.2 27.8,24.8 27.2,24.8zM28.2,24.2 28.8,24.2 28.8,24.8 28.2,24.8zM30.2,24.2 30.8,24.2 30.8,24.8 30.2,24.8zM12.2,25.2 12.8,25.2 12.8,25.8 12.2,25.8zM16.2,25.2 16.8,25.2 16.8,25.8 16.2,25.8zM18.2,25.2 18.8,25.2 18.8,25.8 18.2,25.8zM20.2,25.2 20.8,25.2 20.8,25.8 20.2,25.8zM21.2,25.2 21.8,25.2 21.8,25.8 21.2,25.8zM22.2,25.2 22.8,25.2 22.8,25.8 22.2,25.8zM24.2,25.2 24.8,25.2 24.8,25.8 24.2,25.8zM28.2,25.2 28.8,25.2 28.8,25.8 28.2,25.8zM29.2,25.2 29.8,25.2 29.8,25.8 29.2,25.8zM32.2,25.2 32.8,25.2 32.8,25.8 32.2,25.8zM4.2,26.2 4.8,26.2 4.8,26.8 4.2,26.8zM5.2,26.2 5.8,26.2 5.8,26.8 5.2,26.8zM6.2,26.2 6.8,26.2 6.8,26.8 6.2,26.8zM7.2,26.2 7.8,26.2 7.8,26.8 7.2,26.8zM8.2,26.2 8.8,26.2 8.8,26.8 8.2,26.8zM9.2,26.2 9.8,26.2 9.8,26.8 9.2,26.8zM10.2,26.2 10.8,26.2 10.8,26.8 10.2,26.8zM14.2,26.2 14.8,26.2 14.8,26.8 14.2,26.8zM16.2,26.2 16.8,26.2 16.8,26.8 16.2,26.8zM17.2,26.2 17.8,26.2 17.8,26.8 17.2,26.8zM18.2,26.2 18.8,26.2 18.8,26.8 18.2,26.8zM19.2,26.2 19.8,26.2 19.8,26.8 19.2,26.8zM21.2,26.2 21.8,26.2 21.8,26.8 21.2,26.8zM22.2,26.2 22.8,26.2 22.8,26.8 22.2,26.8zM23.2,26.2 23.8,26.2 23.8,26.8 23.2,26.8zM24.2,26.2 24.8,26.2 24.8,26.8 24.2,26.8zM26.2,26.2 26.8,26.2 26.8,26.8 26.2,26.8zM28.2,26.2 28.8,26.2 28.8,26.8 28.2,26.8zM4.2,27.2 4.8,27.2 4.8,27.8 4.2,27.8zM10.2,27.2 10.8,27.2 10.8,27.8 10.2,27.8zM13.2,27.2 13.8,27.2 13.8,27.8 13.2,27.8zM14.2,27.2 14.8,27.2 14.8,27.8 14.2,27.8zM15.2,27.2 15.8,27.2 15.8,27.8 15.2,27.8zM16.2,27.2 16.8,27.2 16.8,27.8 16.2,27.8zM17.2,27.2 17.8,27.2 17.8,27.8 17.2,27.8zM19.2,27.2 19.8,27.2 19.8,27.8 19.2,27.8zM20.2,27.2 20.8,27.2 20.8,27.8 20.2,27.8zM22.2,27.2 22.8,27.2 22.8,27.8 22.2,27.8zM23.2,27.2 23.8,27.2 23.8,27.8 23.2,27.8zM24.2,27.2 24.8,27.2 24.8,27.8 24.2,27.8zM28.2,27.2 28.8,27.2 28.8,27.8 28.2,27.8zM29.2,27.2 29.8,27.2 29.8,27.8 29.2,27.8zM4.2,28.2 4.8,28.2 4.8,28.8 4.2,28.8zM6.2,28.2 6.8,28.2 6.8,28.8 6.2,28.8zM7.2,28.2 7.8,28.2 7.8,28.8 7.2,28.8zM8.2,28.2 8.8,28.2 8.8,28.8 8.2,28.8zM10.2,28.2 10.8,28.2 10.8,28.8 10.2,28.8zM12.2,28.2 12.8,28.2 12.8,28.8 12.2,28.8zM13.2,28.2 13.8,28.2 13.8,28.8 13.2,28.8zM16.2,28.2 16.8,28.2 16.8,28.8 16.2,28.8zM20.2,28.2 20.8,28.2 20.8,28.8 20.2,28.8zM21.2,28.2 21.8,28.2 21.8,28.8 21.2,28.8zM22.2,28.2 22.8,28.2 22.8,28.8 22.2,28.8zM24.2,28.2 24.8,28.2 24.8,28.8 24.2,28.8zM25.2,28.2 25.8,28.2 25.8,28.8 25.2,28.8zM26.2,28.2 26.8,28.2 26.8,28.8 26.2,28.8zM27.2,28.2 27.8,28.2 27.8,28.8 27.2,28.8zM28.2,28.2 28.8,28.2 28.8,28.8 28.2,28.8zM29.2,28.2 29.8,28.2 29.8,28.8 29.2,28.8zM30.2,28.2 30.8,28.2 30.8,28.8 30.2,28.8zM32.2,28.2 32.8,28.2 32.8,28.8 32.2,28.8zM4.2,29.2 4.8,29.2 4.8,29.8 4.2,29.8zM6.2,29.2 6.8,29.2 6.8,29.8 6.2,29.8zM7.2,29.2 7.8,29.2 7.8,29.8 7.2,29.8zM8.2,29.2 8.8,29.2 8.8,29.8 8.2,29.8zM10.2,29.2 10.8,29.2 10.8,29.8 10.2,29.8zM12.2,29.2 12.8,29.2 12.8,29.8 12.2,29.8zM13.2,29.2 13.8,29.2 13.8,29.8 13.2,29.8zM15.2,29.2 15.8,29.2 15.8,29.8 15.2,29.8zM16.2,29.2 16.8,29.2 16.8,29.8 16.2,29.8zM17.2,29.2 17.8,29.2 17.8,29.8 17.2,29.8zM18.2,29.2 18.8,29.2 18.8,29.8 18.2,29.8zM22.2,29.2 22.8,29.2 22.8,29.8 22.2,29.8zM23.2,29.2 23.8,29.2 23.8,29.8 23.2,29.8zM24.2,29.2 24.8,29.2 24.8,29.8 24.2,29.8zM25.2,29.2 25.8,29.2 25.8,29.8 25.2,29.8zM27.2,29.2 27.8,29.2 27.8,29.8 27.2,29.8zM29.2,29.2 29.8,29.2 29.8,29.8 29.2,29.8zM30.2,29.2 30.8,29.2 30.8,29.8 30.2,29.8zM4.2,30.2 4.8,30.2 4.8,30.8 4.2,30.8zM6.2,30.2 6.8,30.2 6.8,30.8 6.2,30.8zM7.2,30.2 7.8,30.2 7.8,30.8 7.2,30.8zM8.2,30.2 8.8,30.2 8.8,30.8 8.2,30.8zM10.2,30.2 10.8,30.2 10.8,30.8 10.2,30.8zM12.2,30.2 12.8,30.2 12.8,30.8 12.2,30.8zM13.2,30.2 13.8,30.2 13.8,30.8 13.2,30.8zM14.2,30.2 14.8,30.2 14.8,30.8 14.2,30.8zM16.2,30.2 16.8,30.2 16.8,30.8 16.2,30.8zM18.2,30.2 18.8,30.2 18.8,30.8 18.2,30.8zM20.2,30.2 20.8,30.2 20.8,30.8 20.2,30.8zM21.2,30.2 21.8,30.2 21.8,30.8 21.2,30.8zM22.2,30.2 22.8,30.2 22.8,30.8 22.2,30.8zM23.2,30.2 23.8,30.2 23.8,30.8 23.2,30.8zM24.2,30.2 24.8,30.2 24.8,30.8 24.2,30.8zM25.2,30.2 25.8,30.2 25.8,30.8 25.2,30.8zM26.2,30.2 26.8,30.2 26.8,30.8 26.2,30.8zM27.2,30.2 27.8,30.2 27.8,30.8 27.2,30.8zM28.2,30.2 28.8,30.2 28.8,30.8 28.2,30.8zM30.2,30.2 30.8,30.2 30.8,30.8 30.2,30.8zM31.2,30.2 31.8,30.2 31.8,30.8 31.2,30.8zM4.2,31.2 4.8,31.2 4.8,31.8 4.2,31.8zM10.2,31.2 10.8,31.2 10.8,31.8 10.2,31.8zM13.2,31.2 13.8,31.2 13.8,31.8 13.2,31.8zM18.2,31.2 18.8,31.2 18.8,31.8 18.2,31.8zM19.2,31.2 19.8,31.2 19.8,31.8 19.2,31.8zM20.2,31.2 20.8,31.2 20.8,31.8 20.2,31.8zM21.2,31.2 21.8,31.2 21.8,31.8 21.2,31.8zM26.2,31.2 26.8,31.2 26.8,31.8 26.2,31.8zM28.2,31.2 28.8,31.2 28.8,31.8 28.2,31.8zM29.2,31.2 29.8,31.2 29.8,31.8 29.2,31.8zM31.2,31.2 31.8,31.2 31.8,31.8 31.2,31.8zM4.2,32.2 4.8,32.2 4.8,32.8 4.2,32.8zM5.2,32.2 5.8,32.2 5.8,32.8 5.2,32.8zM6.2,32.2 6.8,32.2 6.8,32.8 6.2,32.8zM7.2,32.2 7.8,32.2 7.8,32.8 7.2,32.8zM8.2,32.2 8.8,32.2 8.8,32.8 8.2,32.8zM9.2,32.2 9.8,32.2 9.8,32.8 9.2,32.8zM10.2,32.2 10.8,32.2 10.8,32.8 10.2,32.8zM14.2,32.2 14.8,32.2 14.8,32.8 14.2,32.8zM15.2,32.2 15.8,32.2 15.8,32.8 15.2,32.8zM16.2,32.2 16.8,32.2 16.8,32.8 16.2,32.8zM17.2,32.2 17.8,32.2 17.8,32.8 17.2,32.8zM18.2,32.2 18.8,32.2 18.8,32.8 18.2,32.8zM19.2,32.2 19.8,32.2 19.8,32.8 19.2,32.8zM22.2,32.2 22.8,32.2 22.8,32.8 22.2,32.8zM26.2,32.2 26.8,32.2 26.8,32.8 26.2,32.8zM28.2,32.2 28.8,32.2 28.8,32.8 28.2,32.8zM30.2,32.2 30.8,32.2 30.8,32.8 30.2,32.8z" stroke-width=".3" stroke-linejoin="round" stroke="#000000" fill="#000000"/>
//! </svg>

use crate::module::Module;
use std::fmt::{Debug, Formatter};
use std::ops::{Index, IndexMut};

use crate::datamasking::Mask;
use crate::encode::Mode;
#[cfg(not(target_arch = "wasm32"))]
use crate::helpers;
use crate::{encode, Version, ECL};

/// A QRCode can be created using QRBuilder. Simple API for simple usage.
/// If you need to use QRCode directly, please file an [issue on
/// github](https://github.com/erwanvivien/fast_qr).
///
/// Contains all needed information about the QR code.
/// This is the main struct of the crate.
///
/// I contains the matrix of the QR code, stored as a one-dimensional array.
#[derive(Clone)]
pub struct QRCode {
    /// This array contains upto max qrcode size (177 x 177). It is using a fixed size
    /// array simply because of perfomance.
    ///
    /// # Other data type possible:
    /// - Templated Matrix was faster but crate size was huge.
    /// - Vector using `with_capacity`, really bad.
    pub data: [Module; 177 * 177],
    /// Width & Height of QRCode. If manually set, should be `version * 4 + 17`, `version` going
    /// from 1 to 40 both included.
    pub size: usize,

    /// Version of the QRCode, impacts the size.
    ///
    /// None will optimize Version according to ECL and Mode
    pub version: Option<Version>,
    /// Defines how powerfull QRCode redundancy should be or how much percent of a QRCode can be
    /// recovered.
    ///
    /// `ECL::L`: 7%
    /// `ECL::M`: 15%
    /// `ECL::Q`: 25%
    /// `ELC::H`: 30%
    ///
    /// None will set ECL to Quartile (`ELC::Q`)
    pub ecl: Option<ECL>,

    /// Changes the final pattern used.
    ///
    /// None will find the best suited mask.
    pub mask: Option<Mask>,
    /// Mode defines which data is being parsed, between Numeric, AlphaNumeric & Byte.
    ///
    /// None will optimize Mode according to user input.
    ///
    /// ## Note
    /// Kanji mode is not supported yet.
    pub mode: Option<Mode>,
}

impl QRCode {
    /// A Default QR will have all it's fields as None and a default Matrix containing Light data
    /// modules.
    pub const fn default(size: usize) -> Self {
        QRCode {
            data: [Module::data(Module::LIGHT); 177 * 177],
            size,
            version: None,
            ecl: None,
            mask: None,
            mode: None,
        }
    }
}

impl Index<usize> for QRCode {
    type Output = [Module];

    fn index(&self, index: usize) -> &Self::Output {
        &self.data[index * self.size..(index + 1) * self.size]
    }
}

impl IndexMut<usize> for QRCode {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        &mut self.data[index * self.size..(index + 1) * self.size]
    }
}

/// Contains different error when QRCode could not be created
pub enum QRCodeError {
    /// If data if too big to be encoded (referring to Table 7-11 of the spec or [an online table](https://fast-qr.com/diy/tables/ecl))
    EncodedData,
    /// Specified version too small to contain data
    SpecifiedVersion,
}

impl Debug for QRCodeError {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        match self {
            QRCodeError::EncodedData => f.write_str("Data too big to be encoded"),
            QRCodeError::SpecifiedVersion => {
                f.write_str("Specified version too low to contain data")
            }
        }
    }
}

/// Builder for `QRCode` struct
pub struct QRBuilder {
    input: String,
    ecl: Option<ECL>,
    // mode: Option<Mode>,
    version: Option<Version>,
    mask: Option<Mask>,
}

impl QRBuilder {
    /// Creates an instance of QRBuilder with default parameters
    pub fn new(input: String) -> QRBuilder {
        QRBuilder {
            input,
            mask: None,
            // mode: None,
            version: None,
            ecl: None,
        }
    }

    // pub fn mode(&mut self, mode: Mode) -> &mut Self {
    //     self.mode = Some(mode);
    //     self
    // }

    /// Changes the Encoding Level
    pub fn ecl(&mut self, ecl: ECL) -> &mut Self {
        self.ecl = Some(ecl);
        self
    }

    /// Changes the version
    pub fn version(&mut self, version: Version) -> &mut Self {
        self.version = Some(version);
        self
    }

    /// Changes the mask, should very rarely be used
    pub fn mask_nb(&mut self, mask: Mask) -> &mut Self {
        self.mask = Some(mask);
        self
    }

    /// Computes a QRCode with given parameters
    pub fn build(&self) -> Result<QRCode, QRCodeError> {
        QRCode::new(self.input.as_bytes(), self.ecl, self.version, self.mask)
    }
}

impl QRCode {
    /// Creates a new QRCode from a ECL / version
    pub fn new(
        input: &[u8],
        ecl: Option<ECL>,
        v: Option<Version>,
        mut mask: Option<Mask>,
    ) -> Result<Self, QRCodeError> {
        use crate::placement::create_matrix;

        let mode = encode::best_encoding(input);
        let mut level = ECL::Q;
        if let Some(e) = ecl {
            level = e;
        }

        let version = match Version::get(mode, level, input.len()) {
            Some(version) => version,
            None => return Err(QRCodeError::EncodedData),
        };
        let version = match v {
            Some(user_version) if user_version as usize >= version as usize => user_version,
            None => version,
            Some(_) => return Err(QRCodeError::SpecifiedVersion),
        };

        let out = create_matrix(input, level, mode, version, &mut mask);
        Ok(out)
    }

    #[cfg(not(target_arch = "wasm32"))]
    /// Prints the QRCode to the terminal
    pub fn print(&self) {
        helpers::print_matrix_with_margin(self);
    }
}
